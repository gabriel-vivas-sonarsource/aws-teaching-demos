AWSTemplateFormatVersion: '2010-09-09'
Description: 'Re:Invent 2016, Federation Workshop, AD FS Infrastructure Template - NOT FOR PRODUCTION USE'
#  TODO: INVESTIGATE "JOIN DOMAIN DIRECTORY" IN EC2 WIZARD. - can't find anything in cloudformation
# TODO: GET SSM-USER WORKING ON DOMAIN CONTROLLER

Parameters:

  VPC:
    Description: VPC to launch instances into, must contain a public subnet
    Type: AWS::EC2::VPC::Id

  PublicSubnetId: 
    Description: Public subnet for instances, must exist within the selected VPC
    Type: AWS::EC2::Subnet::Id

  AdminPassword:
    Description: A complex password for the Administrator user account
    #NoEcho: TRUE
    Type: String
    Default: Password#1
    AllowedPattern: (?=^.{4,}$)(?=.*\d)(?=.*[!@#$%^&*]+)(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$
    ConstraintDescription: "The Directory Services Restore Mode password does not meet the password complexity requirements of the password policy. Strong passwords require a combination of uppercase and lowercase letters, numbers, and symbols. Supply a stronger password."    

  DomainDNSName:
    Default: example.com
    Description: DNS Domain for the AD Domain (example.com)
    Type: String
  
  DomainNetBiosName:
    Default: EXAMPLE
    Description: Netbios name for the domain (EXAMPLE)
    Type: String
  
  InstanceType:
    AllowedValues:
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t3.medium
    Description: Amazon EC2 instance type
    Type: String
  
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: keypair-name
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  RestoreModePassword:
    Description: A complex password for the Restore mode user account
    #NoEcho: TRUE
    Type: String
    Default: Password#1
    AllowedPattern: (?=^.{4,}$)(?=.*\d)(?=.*[!@#$%^&*]+)(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$
    ConstraintDescription: "The Directory Services Restore Mode password does not meet the password complexity requirements of the password policy. Strong passwords require a combination of uppercase and lowercase letters, numbers, and symbols. Supply a stronger password."    

  SourceCidr:
    AllowedPattern: ^([0-9]+\.){3}[0-9]+\/[0-9]+$
    Default: 0.0.0.0/0
    Description: The CIDR notation for the IP range that access should be restricted to.
    MaxLength: 18
    MinLength: 9
    Type: String
  
  VPCCIDR:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Default: 172.31.0.0/16
    Description: CIDR Block for the selected VPC (noted in parenthesis following VPC-id)
    Type: String

  WindowsAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base
    #Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base    
    Description: You probably won't need to change this value.  This is looking up the latest Windows AMI using the Parameter Store...


Resources:
  
  # TODO: YAMLIZE THE ASSUMEROLEPOLICYDOCUMENT
  RoleReadOnly:  
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: FederationWorkshop-ReadOnly
      AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Federated\":\"arn:aws:iam::${AWS::AccountId}:saml-provider/idp1\"},\"Action\":\"sts:AssumeRoleWithSAML\",\"Condition\":{\"StringEquals\":{\"SAML:aud\":\"https://signin.aws.amazon.com/saml\"}}}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/ReadOnlyAccess


  DomainController:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref WindowsAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: [ !Ref DomainControllerSecurityGroup ]
      SubnetId: !Ref PublicSubnetId
      IamInstanceProfile:   !Ref InstanceProfile     # Allows EC2 Instance to talk with SSM, CloudWatch
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DC
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v --stack ${AWS::StackId} --resource DomainController --region ${AWS::Region} 
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource DomainController --region ${AWS::Region}
          </script>
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            1-start-cloudwatch:
              command: powershell -Command C:\cfn\scripts\setupCloudWatchAgent.ps1  
            2-run-dcpromo:
              command: !Sub C:\cfn\RunCommand.bat "dcpromo /unattend  /ReplicaOrNewDomain:Domain  /NewDomain:Forest  /NewDomainDNSName:${DomainDNSName} /ForestLevel:4 /DomainNetbiosName:${DomainNetBiosName} /DomainLevel:4  /InstallDNS:Yes  /ConfirmGc:Yes  /CreateDNSDelegation:No  /DatabasePath:"C:\Windows\NTDS"  /LogPath:"C:\Windows\NTDS"  /SYSVOLPath:"C:\Windows\SYSVOL" /SafeModeAdminPassword=${RestoreModePassword} /RebootOnCompletion:Yes"
              waitAfterCompletion: forever
            3-set-execution-policy:
              command: powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force
              waitAfterCompletion: '0'
            4-reset-local-admin:
              command: !Sub powershell.exe -command C:\cfn\scripts\Reset-LocalAdminPassword.ps1 -password '${AdminPassword}' 
              waitAfterCompletion: '0'
            5-setup-users:
              command: !Sub powershell.exe -command C:\cfn\scripts\domainControllerSetup.ps1  
              waitAfterCompletion: '0'
          files:
            C:\cfn\RunCommand.bat:
              content: |
                %~1
                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DomainController.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --stack ${AWS::StackId} --resource DomainController --region ${AWS::Region}
            c:\cfn\scripts\Reset-LocalAdminPassword.ps1:
              #source: http://federationworkshopreinvent2016.s3-website-us-east-1.amazonaws.com/bootstrapping/Reset-LocalAdminPassword.ps1
              content: |
                [CmdletBinding()]
                param(
                    [string]
                    $password
                )
                try {
                    $ErrorActionPreference = "Stop"
                    Write-Verbose "Resetting local admin password"
                    ([adsi]("WinNT://$env:COMPUTERNAME/administrator, user")).psbase.invoke('SetPassword', $password)
                }
                catch {
                    $_ | Write-AWSQuickStartException
                }                
            c:\cfn\scripts\domainControllerSetup.ps1:
              content: !Sub |
                # Wait until the AD service starts back up:
                Start-Sleep -Seconds 30
                # Make a secure string to hold the password and create users, groups, and assign membership
                $Password = "${RandomPass.RandomString}" | ConvertTo-SecureString -AsPlainText -Force
                New-ADUser -Name "alice" -AccountPassword $Password -SamAccountName alice -DisplayName "alice" -EmailAddress alice@example.com -Enabled $TRUE -GivenName alice -PassThru -PasswordNeverExpires $TRUE -UserPrincipalName alice
                New-ADUser -Name "bob" -AccountPassword $Password -SamAccountName bob -DisplayName "bob" -EmailAddress bob@example.com -Enabled $TRUE -GivenName bob -PassThru -PasswordNeverExpires $TRUE -UserPrincipalName bob
                New-ADUser -Name "adfssvc" -AccountPassword $Password -SamAccountName adfssvc -DisplayName "adfssvc" -EmailAddress adfssvc@example.com -Enabled $TRUE -GivenName adfssvc -PassThru -PasswordNeverExpires $TRUE -UserPrincipalName adfssvc
                NEW-ADGroup -name "AWS-${AWS::AccountId}-ReadOnly" -groupscope Global
                NEW-ADGroup -name "AWS-${AWS::AccountId}-PowerUser" -groupscope Global
                Add-ADGroupMember -Identity AWS-${AWS::AccountId}-ReadOnly -Members bob
                Add-ADGroupMember -Identity AWS-${AWS::AccountId}-ReadOnly -Members alice
                Add-ADGroupMember -Identity AWS-${AWS::AccountId}-PowerUser -Members alice
            c:\cfn\scripts\setupCloudWatchAgent.ps1:
              content: !Sub |
                mkdir C:\Downloads\Amazon\AmazonCloudWatchAgent
                powershell -Command "(New-Object Net.WebClient).DownloadFile('https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi','C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi')"
                Start-Process msiexec.exe -Wait -ArgumentList '/I C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi /quiet'
                powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
            # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
            C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json:
              content: !Sub |
                { "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "C:\\cfn\\log\\cfn-hup.log",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "domain-controller-cfn-hup"
                          },
                          {
                            "file_path": "C:\\cfn\\log\\cfn-init.log",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "domain-controller-cfn-init"
                          },
                          {
                            "file_path": "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Log\\UserdataExecution.log",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "domain-controller-ec2launchlog"
                          },
                          {
                            "file_path": "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs\\Ec2ConfigLog.txt",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "domain-controller-ec2configlog"
                          }
                        ]
                      }
                    }
                  }
                }
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
        



  DomainControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Controller
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: !Ref SourceCidr
        FromPort: 3389
        IpProtocol: tcp
        ToPort: 3389
      - CidrIp: !Ref VPCCIDR
        FromPort: -1
        IpProtocol: -1
        ToPort: -1
      - CidrIp: !Ref SourceCidr
        FromPort: -1
        IpProtocol: icmp
        ToPort: -1
    
  DomainMemberSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Members
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: !Ref SourceCidr
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref SourceCidr
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443


  ADFS:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Properties:
      ImageId: !Ref WindowsAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile:   !Ref InstanceProfile     # Allows EC2 Instance to talk with SSM, CloudWatch
      SecurityGroupIds:
      - Ref: DomainControllerSecurityGroup
      - Ref: DomainMemberSecurityGroup
      SubnetId: !Ref PublicSubnetId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ADFS
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v --stack ${AWS::StackId} --resource ADFS --region ${AWS::Region} 
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource ADFS --region ${AWS::Region}
          </script>
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_setupFiles
            - 01_setupCfnHup
            - 02_setupCloudWatch
            - 03_setupAdfs
        00_setupFiles:
          files:
            c:\cfn\scripts\setupAdfsPart1.ps1:
              content: !Sub |
                Set-ExecutionPolicy RemoteSigned -Force
                # Change password:
                C:\cfn\scripts\Reset-LocalAdminPassword.ps1 -password '${AdminPassword}' 
                # DNS server should be the domain controller:
                Set-DnsClientServerAddress -InterfaceAlias "Ethernet" -ServerAddresses ${DomainController.PrivateIp}
                # TODO: THIS COMMAND FAILS WHEN RUN VIA SCRIPT, BUT IS FINE WHEN RUN OVER RDP CONNECTION.  ERROR IS A positional parameter cannot be found that accepts argument 'example.com'.  It puts a question mark in front of domain name.
                add-computer -NewName "adfsserver" –DomainName "${DomainDNSName}" -restart
            c:\cfn\scripts\setupAdfsPart2.ps1:
              content: !Sub |
                # TODO:  HOW TO RUN THIS UNDER EXAMPLE\ADMINISTRATOR USER????
                # TODO:  The request is not supported.
                Add-KdsRootKey -EffectiveTime (Get-Date).AddHours(-10)
                # Install ADFS
                # TODO:  ERROR IS A positional parameter cannot be found that accepts -?IncludeManagementTools
                Install-windowsfeature adfs-federation 
                # Install certificate:
                $secure = ConvertTo-SecureString "Pass@123" -AsPlainText -Force
                $cert = Import-PfxCertificate -FilePath C:\idp1cert.pfx -CertStoreLocation Cert:\LocalMachine\My -Password $secure
                # Configure ADFS:
                # TODO: i'M GUESSING THE CERT
                # TODO: I'M GUESSING THAT FEDERATIONSERVICENAME = SERVICEACCOUNT = idp1.example.com
                # TODO: I'M GUESSING THAT GROUPSERVICEACCOUNTIDENTIFIER = FEDERATIONSERVICEDISPLAYNAME = adfssvc
                Install-AdfsFarm -CertificateThumbprint $cert.Thumbprint -FederationServiceName idp1.example.com -GroupServiceAccountIdentifier EXAMPLE\adfssvc$
            C:\cfn\RunCommand.bat:
              content: |
                %~1
                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ADFS.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --stack ${AWS::StackId} --resource ADFS --region ${AWS::Region}
            c:\cfn\scripts\Reset-LocalAdminPassword.ps1:
              #source: http://federationworkshopreinvent2016.s3-website-us-east-1.amazonaws.com/bootstrapping/Reset-LocalAdminPassword.ps1
              content: |
                [CmdletBinding()]
                param(
                    [string]
                    $password
                )
                try {
                    $ErrorActionPreference = "Stop"
                    Write-Verbose "Resetting local admin password"
                    ([adsi]("WinNT://$env:COMPUTERNAME/administrator, user")).psbase.invoke('SetPassword', $password)
                }
                catch {
                    $_ | Write-AWSQuickStartException
                }                
            c:\idp1cert.pfx:
              source: http://federationworkshopreinvent2016.s3-website-us-east-1.amazonaws.com/bootstrapping/idp1cert.pfx
            c:\cfn\scripts\setupCloudWatchAgent.ps1:
              content: !Sub |
                mkdir C:\Downloads\Amazon\AmazonCloudWatchAgent
                powershell -Command "(New-Object Net.WebClient).DownloadFile('https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi','C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi')"
                Start-Process msiexec.exe -Wait -ArgumentList '/I C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi /quiet'
                powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
            # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
            C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json:
              content: !Sub |
                { "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "C:\\cfn\\log\\cfn-hup.log",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "adfs-cfn-hup"
                          },
                          {
                            "file_path": "C:\\cfn\\log\\cfn-init.log",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "adfs-cfn-init"
                          },
                          {
                            "file_path": "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Log\\UserdataExecution.log",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "adfs-ec2launchlog"
                          },
                          {
                            "file_path": "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs\\Ec2ConfigLog.txt",
                            "log_group_name": "${CloudwatchLogsGroup}",
                            "log_stream_name": "adfs-ec2configlog"
                          }
                        ]
                      }
                    }
                  }
                }
        01_setupCfnHup:
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
        02_setupCloudWatch:
          commands:
            1-start-cloudwatch:
              command: powershell -Command C:\cfn\scripts\setupCloudWatchAgent.ps1  
        03_setupAdfs:
          commands:
            2-setup-part-1:
              command: powershell -Command C:\cfn\scripts\setupAdfsPart1.ps1  
              waitAfterCompletion: forever  # last command reboots system
            3-setup-part-2:
              command: powershell -Command C:\cfn\scripts\setupAdfsPart2.ps1  
              waitAfterCompletion: '0'
            5-signal-success:
              command: cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource ADFS --region ${AWS::Region}
  

  ADFSEIP:
    DependsOn: ADFS
    Properties:
      Domain: vpc
      InstanceId:
        Ref: ADFS
    Type: AWS::EC2::EIP



  DCEIP1:
    DependsOn: DomainController
    Properties:
      Domain: vpc
      InstanceId:
        Ref: DomainController
    Type: AWS::EC2::EIP

  # IAM permissions to EC2 instance:.
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2Role]

  # Allow EC2 instance to make calls to SSM, CloudWatch.
  Ec2Role:
    Type: AWS::IAM::Role
    DependsOn: CloudwatchLogsGroup   # Force LogGroup to be created early and deleted late
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy



  RoleForRandomStrFunctionLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-RandomStrFunctionLambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  RandomStrFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Description: Generate a random string of characters
      FunctionName: !Sub ${AWS::StackName}-RandomString
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt RoleForRandomStrFunctionLambda.Arn
      Runtime: python3.6
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import string
          import random
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              responseData = {}      
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            
            StringLength=int(event['ResourceProperties']['StringLength'])
            
            if StringLength <= 0:
              responseData = {}
              cfnresponse.send(event, context, cfnresponse.FAILED)
            else:
              responseData = {}
              chars=string.ascii_letters # change this to use other kinds of characters
              retval = ''.join(random.choice(chars) for _ in range(StringLength))
              retval += '1'
              responseData['RandomString'] = retval
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            
            return

  RandomPass:
    Type: Custom::RandomPass
    DependsOn:  CloudwatchLogsGroupLambda  # Force the Lambda's LogGroup to be created early and deleted late
    Properties:
      ServiceToken: !GetAtt RandomStrFunction.Arn
      StringLength: 16

  # Explicit declaration of the LogGroup allows us to control its retention:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-ActiveDirectory 
      RetentionInDays: 3

  CloudwatchLogsGroupLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RandomStrFunction}
      RetentionInDays: 3

Mappings:
  RegionalAMIs:
    ap-northeast-1:
      Win2012R2Base: ami-00203503bf62d6c70
    us-east-1:
      Win2012R2Base: ami-01f018d80b6789084 # originally ami-0382724d79a997027
    us-west-2:
      Win2012R2Base: ami-02cd0387b1ed07f2e

Outputs:
  ADFS:
    Description: ADFS
    Value: !Ref ADFS

  ADFSPrivateIP:
    Description: Private IP of the ADFS Server
    Value: !GetAtt ADFS.PrivateIp

  ADFSPublicIP:
    Description: PublicIP of the ADFS Server
    Value: !GetAtt ADFS.PublicIp

  DomainController:
    Description: DomainController
    Value: !Ref DomainController

  DomainControllerPrivateIP:
    Description: Private IP of the Domain Controller
    Value: !GetAtt DomainController.PrivateIp

  DomainControllerPublicIP:
    Description: Public IP of the Domain Controller
    Value: !GetAtt DomainController.PublicIp

  RandomPassword:
    Description: Random Password
    Value: !GetAtt RandomPass.RandomString
