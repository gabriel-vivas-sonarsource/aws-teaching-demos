AWSTemplateFormatVersion: 2010-09-09

# Stand up an EKS cluster backed by Amazon Linux instances.  

Parameters:
  
  ClusterSize:
    Type: String
    Description: The Minimum:Desired:Maximum number of EC2 worker nodes in the cluster.  
    Default:  "2:2:6"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC with the subnets you want to use

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 3 subnets in your selected VPC.

  CreateBastionHost:
    Type: String 
    AllowedValues: 
    - True
    - False
    Default: True
    Description: Do you want to create a Bastion Host?  It will be configured with Session Manager, eksctl, kubectl.  Very handy.

  BastionRole:
    Type: String 
    Description:  IAM roles NAME (NOT ARN!) of the role we wish this Bastion Host to assume.  Should be same role used to create the cluster.
    Default:  deleteMeK8sRoot

  BastionHostKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the bastion host.

  AmazonLinux2AMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux AMI using the Parameter Store...


Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EKS Cluster Details
        Parameters:
          - VpcId
          - SubnetIds
          - ClusterSize
      - Label:
          default: Bastion Host Details
        Parameters:
          - CreateBastionHost
          - BastionRole
          - BastionHostKeyName
          - AmazonLinux2AMI

Conditions:
  CreateBastionHostCondition:    !Equals [ !Ref CreateBastionHost, "True" ]

Resources:

  #  This role Allows Amazon EKS to manage your clusters on your behalf
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EKSServiceRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: eks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  # This role is assumed by the worker nodes in our cluster
  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EKSNodeRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly


  # # This security group replaces the default.  It is basically the same except it allows TCP ingress
  # # on high-order ports, which allows us to use NodePort and LoadBalancer type services with the outside world.
  # # Probably a more secure way to achieve this in a real-world example.
  # ReplacementSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub ${AWS::StackName}-ReplacementEKSSecurityGroup
  #     GroupDescription: Alternate security group for use in an EKS cluster.  Does the same as the default but also opens up high-order ports for external ingress.
  #     VpcId: !Ref VpcId
  #     Tags:
  #     - Key: Name
  #       Value: !Sub ${AWS::StackName}-ReplacementEKSSecurityGroup

  # ReplacementSecurityGroupIntercommunicationIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     Description: Allow worker control plane and nodes to intercommunicate
  #     GroupId: !Ref ReplacementSecurityGroup
  #     SourceSecurityGroupId: !Ref ReplacementSecurityGroup
  #     IpProtocol: "-1"

  # ReplacementSecurityGroupGeneralIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     Description: Allow outside parties to use high-order ports
  #     GroupId: !Ref ReplacementSecurityGroup
  #     IpProtocol: tcp
  #     CidrIp: 0.0.0.0/0
  #     FromPort: 1025
  #     ToPort: 65535



  # The EKS Cluster itself, a bit of an anticlimax.  
  # The cluster will run in the subnets you specify using the Security Group above.
  # Can take up to 10 minutes for AWS to provision this, and it costs $.20 per hour.
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${AWS::StackName}-Cluster
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig: 
        # SecurityGroupIds:
        # - !Ref ReplacementSecurityGroup
        SubnetIds: !Ref SubnetIds

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties: 
      AmiType: AL2_x86_64
      ClusterName: !Ref Cluster
      NodegroupName: !Sub ${AWS::StackName}-NodeGroup
      NodeRole: !GetAtt  EKSNodeRole.Arn
      ScalingConfig: 
        MinSize:     !Select [0,  !Split [ ":", !Ref ClusterSize ]]
        DesiredSize: !Select [1,  !Split [ ":", !Ref ClusterSize ]]
        MaxSize:     !Select [2,  !Split [ ":", !Ref ClusterSize ]]
      Subnets: !Ref SubnetIds
      Tags:
      - Key: Name
        Value: EKS Worker 

  # Security Group for the Bastion Host.  Allow SSH from anywhere:
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition:  CreateBastionHostCondition
    Properties:
      GroupDescription: Security Group for Bastion Host
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: BastionHostSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0     # A little bit loose

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition:  CreateBastionHostCondition
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-Template
      LaunchTemplateData: 
        ImageId: !Ref AmazonLinux2AMI        # We lookup AMI using the AWS Systems Manager
        InstanceType: t2.micro             
        KeyName: !Ref BastionHostKeyName       # Use the keypair from the input parameters
        IamInstanceProfile: 
          Name: !Ref BastionInstanceProfile      # Allows EC2 Instance to talk with SSM
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Select [ 0, !Ref SubnetIds ]   # You have to specify a subnet in this launch template, but this will be ignored when using ASG.
          Groups: [!Ref BastionHostSecurityGroup]       # Plug in the security group.
        InstanceMarketOptions: 
          MarketType: spot
        BlockDeviceMappings: 
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: 15
            VolumeType: gp2
      UserData:      #  Install AWS Systems Manager, eksctl, kubectl, helm, etc..:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install git -y
          ## Install v2 of AWS CLI (AMI installs v1)
          #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          #unzip awscliv2.zip
          #./aws/install          
          # Install SSM Agent for session manager (remote connection)
          cd /tmp
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          start amazon-ssm-agent
          # eksctl
          echo Installing eksctl
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
          # Kubectl
          echo Installing Kubectl
          curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.9/2020-08-04/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin
          kubectl version --short --client
          # Set current region.  AWS cannot guess to use the region it is in
          aws configure set region ${AWS::Region}
          echo current region is set to `aws configure get region`
          # Display your current identity in the log 
          aws sts get-caller-identity 
          # Configure kubeconfig
          aws eks update-kubeconfig --name ${Cluster}
          # Helm
          echo Installing Helm
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition:  CreateBastionHostCondition
    Properties:
      VPCZoneIdentifier: !Select [ 0, !Ref SubnetIds ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate 
        Version: !GetAtt LaunchTemplate.LatestVersionNumber  
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: EKS Bastion
        PropagateAtLaunch: true

  # Attach AmazonEC2RoleforSSM's permissions to each EC2 Instance in the ASG.
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition:  CreateBastionHostCondition
    Properties:
      Path: /
      Roles: [ !Ref BastionRole]

Outputs:

  EKSClusterConsole:
    Description: AWS management console screen where you can look at your cluster
    Value: !Join ['', ["https://", !Ref "AWS::Region", ".console.aws.amazon.com/eks/home?region=", !Ref "AWS::Region", "#/clusters/", !Ref Cluster ]]

  ClusterName:
    Description: Name of the EKS Cluster
    Value: !Ref Cluster

  CertificateAuthorityData:
    Description: The certificate-authority-data for your cluster.
    Value: !GetAtt  Cluster.CertificateAuthorityData

  EKSEndpoint:
    Description: The endpoint for your Kubernetes API server.
    Value: !GetAtt  Cluster.Endpoint

  EKSNodeRole:
    Description: Role applied to the EKS Nodes.  Used when running kubectl apply -f aws-auth-cm.yaml
    Value: !GetAtt EKSNodeRole.Arn