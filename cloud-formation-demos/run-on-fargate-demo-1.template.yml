AWSTemplateFormatVersion: 2010-09-09

# This demo illustrates how to run a Docker image on an Fargate.
# You will need an existing Docker image stored in ECR.  Pretty much any image will do.
# This demo represents a bare-minimum deployment; no load balancer, no autoscaling.

Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - VPC
          - Subnets
      - Label:
          default: Target ECS Cluster
        Parameters:
          - ECSCluster
          - DockerRepository
          - ContainerName

Parameters:

  ECSCluster:
    Description:  The ECS Cluster that is ready to run our service / task definition.
    Type: String    
    Default: default

  DockerRepository:
    Description:  The name of the existing ECR repository, no tag.  You'll have to create one and initially push to it the docker image that you want to demo.  Check that Region and account number.
    Type: String
    Default: 011673140073.dkr.ecr.us-west-2.amazonaws.com/spring-cloud-aws-environment-demo-1

  ContainerName:
    Description:  The label of the container you will see on the task definition that will be created.  Just used to visually identify your container later.  I usually make mine based on the Docker image name.
    Type: String
    Default:  spring-cloud-aws-environment-demo

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC.  Your container will run on a FARGATE managed instance, but it will connect to the outside world via the VPC and subnets that you say.
    
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 subnets in the same VPC.  Your FARGATE containers will connect in to this network.  Make them public if you want to connect to them over the internet.

Resources:

  # A bit nuts, but you have to provide a role for running a task on FARGATE.
  # This one allows it to pull ECR images and use the "awslogs log driver"
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html
  ECSContainerAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-ECSContainerAgentRole" ]]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs-tasks.amazonaws.com     # A guess. Definitely not ecs.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy


  # When running on FARGATE, your containers will be running on a cluster instance that we don't manage,
  # and our container will use the AWSVPC networking mode; that means each container will get an ENI to connect directly into our subnets.
  # This means a security group for our container is a good idea, and required, respectively.
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0

  # An ECS "Service" associates a TaskDefinition with a cluster:
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['', [!Ref 'AWS::StackName', "-DemoECSService" ]]
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:  # Allows one to update the service without downtime.
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:     # Required for FARGATE launch type.
        AwsvpcConfiguration:   
          AssignPublicIp: ENABLED
          SecurityGroups: [ !Ref ServiceSecurityGroup ] 
          Subnets: !Ref Subnets 
      LaunchType: FARGATE  # or EC2

  # This TaskDefinition defines the image(s) we want to run on ECS
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -DemoTaskDefinition]]
      Cpu: 256          # Required when using FARGATE launch type.  Fargate values are 256, 512, 1024, 2048, 4096
      Memory: 0.5GB       # Required when using FARGATE
      NetworkMode: awsvpc   # Required when using FARGATE
      RequiresCompatibilities: [ FARGATE ]
      TaskRoleArn: !Ref ECSContainerAgentRole         # grants container permission to call aWs APIs 
      ExecutionRoleArn:  !Ref ECSContainerAgentRole   # Container assumes this role.
      ContainerDefinitions:
      - Name: !Ref ContainerName
        Image: !Ref DockerRepository
        Memory: 256     # This is a memory maximum
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: EcsDemo
        #  When networkMode=awsvpc, the host ports and container ports in port mappings must match.            
        PortMappings:
        - ContainerPort: 8080     # The embedded Tomcat inside this container likes to listen on 8080.
          HostPort: 8080            #  When networkMode=awsvpc, the host ports and container ports in port mappings must match.            

  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [!Ref 'AWS::StackName', -SpringEnvironmentDemoECSLogGroup]]
      RetentionInDays: 14
