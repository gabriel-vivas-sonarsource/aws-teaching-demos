AWSTemplateFormatVersion: 2010-09-09

# This is a  codepipeline demo that 
# 1) grabs code from GitHub on change 
# 2) packages and tests using paralell actions 
# 3) Docker-izes it, and stores in ECR
# 4) deploy to a FARGATE ECS Cluster

# TO RUN THIS:  You'll need a GitHub Repository, and a GitHub OAuthToken.
# To make a GitHub OAuthToken, go to GitHub / Settings / Personal Access Tokens
# The default value you see here will work only if you prepend it with a '0'.
# You will also need a working ECS Cluster.  Create one with "base-ecs-cluster.template.yml" if you need one.
# You will also need an ECR registry containing the image you want to deploy, at least the initial copy of it.  This will be updated by the pipeline.
#  This article helped immensely:  https://www.prodops.io/blog/deploying-fargate-services-using-cloudformation

Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: The location of source code
        Parameters:
          - GitHubRepository
          - GitHubOAuthToken
      - Label:
          default: Target ECS Cluster
        Parameters:
          - DockerRepository
          - ECSCluster
          - ClusterType
          - ContainerName
      - Label:
          default: Other
        Parameters:
          - CodePipelineBucketPrefix
          - VpcId
          - SubnetIds

Parameters:
  GitHubRepository:
    Type: String
    Default:  kennyk65/aws-cloudbuild-demo/master
    Description:  The owner / repository / branch that you want to pull from.

  GitHubOAuthToken:
    Type: String
    Default:  b45b4b39fe35179592ceb5259c481b05a0eb27d
    Description:  CodePipeline sources require an OAuthToken, even if they are public.  To make one go to GitHub / Settings / Personal Access Tokens 

  ECSCluster:
    Description:  The ECS Cluster that is ready to run our service / task definition.
    Type: String    
    Default: default

  DockerRepository:
    Description:  The name of the existing ECR repository, no tag.  You'll have to create one and initially push to it the docker image that you want to demo.  CodeBuild will push an updated Docker image here when built.  Check that Region and account number.
    Type: String
    Default: 011673140073.dkr.ecr.us-west-2.amazonaws.com/spring-cloud-aws-environment-demo

  ContainerName:
    Description:  The label of the container as seen on the task definition that will be created.  Just used to visually identify your container later.  I usually make mine based on the Docker image name.
    Type: String
    Default:  spring-cloud-aws-environment-demo

  ClusterType:
    Description:  Do you want to deploy to a standard ECS cluster or Fargate cluster?  Fargate is easier, but more expensive.
    Type: String
    Default: Fargate
    AllowedValues:
      - ECS
      - Fargate

  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use.  Specify the prefix for the bucket name.  You'll probably need to clean this out later to delete the stack.
    Type: String
    Default: codepipeline-kk-

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC that you want to access the running containers through.

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 public subnets in your VPC where you want the resulting containers to be accessible from.


Conditions:
  DeployToFargate:
    !Equals [ !Ref ClusterType, Fargate ]

Resources:

  # This Role allows CodeBuild to do certain things on our behalf.
  # See the policy for the interesting stuff:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CodeBuildPolicy
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            Effect: Allow
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:putObject
              - s3:getObject
              - codebuild:*
              - ecr:Get*                    # For Docker builds pushing to ECR, one will need to GetAuthorizationToken
              - ecr:InitiateLayerUpload     # For Docker push to ECR
              - ecr:Upload*                 # For Docker push to ECR
              - ecr:Complete*               # For Docker push to ECR
              - ecr:*                       # I'm getting weird results on Docker push, and this fixed it.  TODO - Figure out what ECR permissions are needed.
            Resource: "*"

  # This Role allows CodePipeline to make certain things on our behalf:
  # See the policy for the interesting stuff:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CodePipelinePolicy
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            Effect: Allow
            # I can't quite determine which S3 permission CodePipeline wants.  The one-click policy grants everything...
            # codebuild probably does not need to be wide open like this, and the logs should only need
            # to create the stream, group, and log events.
            # Ultimately I ran into too many permission errors with little information available in the documentation to debug, so I had to use "*".
            Action: 
              # - logs:CreateLogGroup
              # - logs:CreateLogStream
              # - logs:PutLogEvents
              # - s3:putObject
              # - s3:getObject
              # - codebuild:*
              # - elasticbeanstalk:*
              - "*"                             #  TODO - FIND OUT WHAT CODE PIPELINE permissions are needed.
            Resource: 
              - "*"

  # When running in Fargate, the task definition MUST have a role
  # providing "to support log driver awslogs", whatever that is.
  # It also needs permission to pull images from ECR:
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-EcsTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-EcsTaskPolicy
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            Effect: Allow
            Action: 
              - logs:*    #  Not sure which permissions are needed for some kind of logging activity.
              - ecr:*     #  Not sure which permissions are needed to pull an ECR image.
            Resource: 
              - "*"

  # General Bucket where CodePipeline will store things:
  # Warning: This will need to be deleted manually before you can delete the stack.
  S3:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${CodePipelineBucketPrefix}${AWS::Region}

  # Security Group for the ECS containers when running in Fargate mode:
  EcsContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EcsSecurityGroup
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
      #  Inbound rules for HTTP on 80 and 8080:
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0


  # This CodeBuild project runs packaging, tests are separate.
  # This is a Java / Maven build, Followed by Dockerization / push to ECR
  MavenBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-MavenBuild
      Description: Maven build, packaging only (tests are run separately)
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs a Maven build, packaging only.  Tests run separately.
            # The output file will be ./target/spring-cloud-aws-environment-demo-1.war, BUT codepipeline will zip this before sending it on.
            # The work-around is to specify the entire target folder as the output artifact, which is ridiculous and a much larger upload than it needs to be.
            phases:
              install:
                runtime-versions:
                  java: openjdk8  
              pre_build:
                commands:
                  - aws --version
              build:
                commands:
                  - echo Maven Build started on `date`
                  - mvn package -DskipTests
                  - echo Maven Build finished on `date`
            artifacts:
              files:
                - target/spring-cloud-aws-environment-demo-1.war
                - Dockerfile
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0  
      Artifacts:    
        Type: CODEPIPELINE

  DockerBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-DockerBuild
      Description: Docker image build + push
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs a Docker build, plus push to ECR
            phases:
              pre_build:
                commands:
                  - aws --version
                  - echo Logging in to Amazon ECR...
                  - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                  - REPOSITORY_URI=${DockerRepository}   
                  - IMAGE_TAG=1111
                  - echo REPOSITORY_URI is set to $REPOSITORY_URI
                  - echo IMAGE_TAG is set to $IMAGE_TAG
                  - echo CODEBUILD_RESOLVED_SOURCE_VERSION is set to $CODEBUILD_RESOLVED_SOURCE_VERSION
                  - echo CODEBUILD_SOURCE_VERSION is set to $CODEBUILD_SOURCE_VERSION
              build:
                commands:
                  - echo Docker Image Build started on `date`
                  - docker build -t $REPOSITORY_URI:latest .
                  - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
                  - echo Docker Image Build finished on `date`
              post_build:
                commands:
                  - echo Pushing the Docker images...
                  - docker push $REPOSITORY_URI:latest
                  - docker push $REPOSITORY_URI:$IMAGE_TAG
                  - echo Writing image definitions file...
                  - printf '[{"name":"${ContainerName}","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
            artifacts:
                files: imagedefinitions.json
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0  
        PrivilegedMode: true      
      Artifacts:    
        Type: CODEPIPELINE

      # TODO: THE IMAGE_TAG IS NOT WHAT THE EXAMPLE AT https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cd-pipeline.html SPECIFIES - COULDN'T GET IT TO WORK.

  # This CodeBuild project runs unit tests only.  
  # The intent is to run parallel to the packaging to decrease build duration.
  MavenTests:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-MavenTests
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs the maven tests only.  No output.
            phases:
              install:
                runtime-versions:
                  java: openjdk8  
              build:
                commands:
                  - echo Testing started on `date`
                  - mvn test
                  - echo Testing finished on `date`
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0  
      Artifacts:    
        Type: CODEPIPELINE


  # This is the CodePipeline with its stages:
  MyPipe:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-PipeFromGitHubToECS
      ArtifactStore: 
        Location: !Ref S3
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages: 

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions: 
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId: 
                Category: Source
                Owner: ThirdParty       
                Provider: GitHub        
                Version: 1              # Required, meaningless and must be 1, go figure.
              Configuration: 
                Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
                Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
                Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
                PollForSourceChanges: true   # Don't know if/how to control frequency
                OAuthToken: !Ref GitHubOAuthToken     # Public repository, Don't know why AWS needs this
              OutputArtifacts: 
                - Name: TheSourceCode

        # Stage 2:  Build using CodeBuild / Maven, Test in parallel using CodeBuild / Maven:
        - Name: Build
          Actions:
            # This runs a Maven build which packages the WAR.  Test are run in the parallel action below: 
            - Name: MavenBuild
              RunOrder: 1
              InputArtifacts: 
                - Name: TheSourceCode           # Duh, the output from the previous step.
              ActionTypeId: 
                Category: Build
                Owner: AWS       
                Provider: CodeBuild        
                Version: 1                      # Required, meaningless and must be 1.
              Configuration:
                ProjectName:  !Ref MavenBuild   # See the CodeBuild definition above.       
              OutputArtifacts: 
                - Name: TheWarAndDockerfile  
            - Name: DockerBuild
              RunOrder: 2
              InputArtifacts: 
                - Name: TheWarAndDockerfile     # Output from the previous step.
              ActionTypeId: 
                Category: Build
                Owner: AWS       
                Provider: CodeBuild        
                Version: 1                      # Required, meaningless and must be 1.
              Configuration:
                ProjectName:  !Ref DockerBuild  # See the CodeBuild definition above.       
              OutputArtifacts: 
                - Name: TheImageDefinition 

            # This runs a Maven build featuring only the unit tests.  No output:   
            - Name: UnitTest
              RunOrder: 1
              InputArtifacts: 
                - Name: TheSourceCode       
              ActionTypeId: 
                Category: Build
                Owner: AWS       
                Provider: CodeBuild        
                Version: 1                  
              Configuration:
                ProjectName:  !Ref MavenTests  # See the CodeBuild definition above.       

        # Stage 3:  Deploy on ECS:
        - Name: Deploy
          Actions:
            - Name: Deploy
              RunOrder: 1
              InputArtifacts: 
                - Name: TheImageDefinition   # This should contain imagedefinitions.json
              ActionTypeId: 
                Category: Deploy
                Owner: AWS       
                Provider: ECS        
                Version: 1                  # Don't know the purpose of 'version'
              Configuration:
                ClusterName:  !Ref ECSCluster  # Input parameter       
                ServiceName:  !Ref ECSService
 
  # An ECS "Service" associates a TaskDefinition with a cluster; it ties tasks to load balancers.
  # WARNING (TODO): There is a nasty circular reference here:  
  #  1. This ECSService cannot start if the Docker image referenced in the Task Definition is not present.  
  #  2. However it won't be present until the CodePipeline puts it there.  
  #  3. However the CodePipeline cannot be complete until the ECS deploy step is complete, 
  #  4. and it depends on this ECSService.  
  #  Ugh.  My solution is to supply the ECR with a pre-seeded image first before the whole thing is created.
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-SpringEnvironmentDemoECSService
      LaunchType: !If [DeployToFargate, FARGATE, EC2]   # Fargate cluster is much less fuss to manage, but much more expensive.
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:    # Enable live updating by allowing a new container to run while the old is still running:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref EcsContainerSecurityGroup
          Subnets: !Ref SubnetIds


  # This TaskDefinition defines the image(s) we want to run on ECS
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-SpringEnvironmentDemoTaskDefinition
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      Cpu: 256                            # Required in Fargate, optional otherwise.
      Memory: 512                             # Required in Fargate, optional otherwise.
      NetworkMode: awsvpc                            # Required for Fargate, ironic because this is the only option in Fargate.
      RequiresCompatibilities:  
         - !If [DeployToFargate, FARGATE, EC2]  # Must be Fargate on Fargate
      ContainerDefinitions:
        # We want to run a little Spring Boot app named "environment-demo",
        # but since the DockerImage is an input parameter it could be anything.  
      - Name: !Ref ContainerName
        Image: !Sub ${DockerRepository}
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: SpringEnvironmentDemo
        PortMappings:
        - ContainerPort: 8080     # The embedded Tomcat inside this container likes to listen on 8080.
          HostPort: !If [DeployToFargate, 8080, 80]  # Fargate network mode can only be awsvpc, which implies the host port = container port, so no port mapping.  Otherwise this means the host must have port 80 available, which influences if you can update a running container.

  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-SpringEnvironmentDemoECSLogGroup
      RetentionInDays: 14

Outputs:
  CodeBuild:
    Value: !Ref MyPipe

