AWSTemplateFormatVersion: 2010-09-09

# This template creates a (nearly) identical environment to what students produce manually in AWS Arch lab 3.
# The main difference is the IAM Role

Parameters:
  PrivateKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the instance, if needed.

Resources:

  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: Lab VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 1 public and 1 private:
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet 
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet 
        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table

  
  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for the web server.  Allow HTTP from anywhere, but SSH only from the Bastion server:
  AppSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: App-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0


  # web server:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # We lookup AMI in the region map
      KeyName: !Ref PrivateKeyName                                    # We get the keypair name from the input parameters
      InstanceType: t2.micro                                         # Any instance type will do
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: true                                # We will need a public IP address
        SubnetId: !Ref PublicSubnet                                   # We should sit in a public subnet.
        GroupSet: [!Ref AppSg]                                       # Attach the security group
      UserData:      #  What to run:
        Fn::Base64: |
          #!/bin/bash
          # Install Apache Web Server and PHP
          yum install -y httpd mysql
          amazon-linux-extras install -y php7.2
          # Download Lab files
          wget https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-200-ARCHIT/v6.8.2/lab-2-webapp/scripts/inventory-app.zip
          unzip inventory-app.zip -d /var/www/html/
          # Download and install the AWS SDK for PHP
          wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
          unzip aws -d /var/www/html
          # Turn on web server
          chkconfig httpd on
          service httpd start


  # EC2 instance will need to talk to SSM to read parameters:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role2
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: arn:aws:ssm:*:*:parameter/inventory-app/*

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]

Mappings:
  #  This is just the Amazon Linux 2 AMI.  These values change every few months:  
  AmazonLinuxAMI:
    us-east-1: 
      AMI: ami-0de53d8956e8dcf80    # Virginia
    us-east-2:
      AMI: ami-02bcbb802e03574ba    # Ohio
    us-west-1:
      AMI: ami-0019ef04ac50be30f    # N California
    us-west-2:
      AMI: ami-0d6621c01e8c2de2c    # Oregon
    ap-south-1:
      AMI: ami-0889b8a448de4fc44    # Mumbai
    ap-northeast-2:
      AMI: ami-047f7b46bd6dd5d84    # Seoul
    ap-southeast-1:
      AMI: ami-01da99628f381e50a    # Singapore
    ap-southeast-2:
      AMI: ami-00e17d1165b9dd3ec    # Sydney
    ap-northeast-1:
      AMI: ami-08847abae18baa040    # Tokyo
    ca-central-1:
      AMI: ami-ce1b96aa             # Montreal
    eu-central-1:
      AMI: ami-0f5dbc86dd9cbf7a8    # Frankfurt
    eu-west-1:
      AMI: ami-0bdb1d6c15a40392c    # Ireland
    eu-west-2:
      AMI: ami-e1768386             # London
    eu-west-3:
      AMI: ami-06340c8c12baa6a09    # Paris
    sa-east-1:
      AMI: ami-0ad7b0031d41ed4b9    # Sao Paulo

Outputs:
  EC2InstancePublicIP:
    Description: The IP address for EC2 instance.
    Value: !Sub http://${WebServer.PublicIp}
