
# Re-creates a simpler version of lab 3 from Advanced Developer, without CDK, Cloud9, 
# or a superflous lambda to trigger the state machine.
# It takes photos uploaded into a bucket, runs it through step functions, detects if a
# human is in the photo via rekognition, then sends an SMS to a phone # you specify.
# The state machine is triggered by a CloudWatch Event (EventBridge Event)
# This event fires whenever an object is uploaded into a bucket.
# This event isn't published unless there is a CloudTrail established which detects this kind of data activity.
# The Trail can't exist without a bucket to put its logging in, even if we turn logging off.
# The bucket must have a policy which allows CloudTrail to log to it.
# TODO: GET RID OF CLOUDTRAIL, WIRE DIRECTLY USING https://aws.amazon.com/blogs/aws/new-use-amazon-s3-event-notifications-with-amazon-eventbridge

Parameters:

  NotificationPhoneNumber:
    Description:  Cell Phone / SMS Number to be contacted at.  
    Type:  String
    Default:  "+14072223333"


Resources:
  # This role is shared (!) by the rekognition function and human notification function:
  rekRole:
    Type: AWS::IAM::Role
    DependsOn: CloudwatchLogsGroupCleanup    # We need this logs group to be one of the last things deleted.
    Properties:
      RoleName: !Sub ${AWS::StackName}-rekRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns: 
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" 

  rekognitionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-rekPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - rekognition:Get*
              - rekognition:List*
              - rekognition:Describe*
              - rekognition:Detect*
              - sns:Get*
              - sns:List*
              - sns:Publish
              - s3:Get*
              - s3:List*
            Resource: "*"
      Roles: [!Ref rekRole]


  onS3UploadCallStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-onS3UploadCallStepFunctionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com

  onS3UploadCallStepFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-onS3UploadCallStepFunctionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource: !Ref StateMachine
      Roles: [ !Ref onS3UploadCallStepFunctionRole ]


  # This role controls what the state machine can do:
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-stateMachineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com

  # The state machine can call these two Lambda functions:
  StateMachinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-StateMachinePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: 
            - !GetAtt RekFunction.Arn
            - !GetAtt NotificationFunction.Arn
      Roles: [ !Ref StateMachineRole ]

  #  Bucket into which one can upload images.  If images contain a human, you will be notified.
  UploadBucket:
    Type: AWS::S3::Bucket

  # A custom cloud trail is required to cause data-level S3 events to be published to CloudWatch Events:
  CloudTrailForS3Events:
    Type: AWS::CloudTrail::Trail
    DependsOn: RidiculousBucketPolicy
    Properties: 
      TrailName: !Sub ${AWS::StackName}-CloudTrailForS3Events
      EventSelectors: 
      - DataResources: 
        - Type: AWS::S3::Object
          Values: [ !Sub "${UploadBucket.Arn}/" ]
        IncludeManagementEvents: false
        ReadWriteType: WriteOnly
      IncludeGlobalServiceEvents: false
      IsLogging: true
      EnableLogFileValidation: false
      IsMultiRegionTrail: false
      S3BucketName: !Ref CloudTrailBucket # Required even if we are not logging.

  # Bucket used for CloudTrail, disposable.
  CloudTrailBucket:
    Type: AWS::S3::Bucket

  # Ridiculous bucket policy for the unused bucket:
  RidiculousBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref CloudTrailBucket
      PolicyDocument: 
        Statement:
        - Effect: Allow
          Principal: 
            Service: cloudtrail.amazonaws.com
          Action: 
          - s3:GetBucketAcl
          - s3:PutObject
          Resource: 
          - !Sub ${CloudTrailBucket.Arn} 
          - !Sub ${CloudTrailBucket.Arn}/* 
          # Condition: 
          #   StringEquals: 
          #     s3:x-amz-acl: bucket-owner-full-control


  # This rule fires every time an object is uploaded into our upload bucket.
  # It fires off the step functions state machine.
  EventRule:  
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub ${AWS::StackName}-EventTriggerStepFunction
      Description: Trigger step functions on upload to bucket.
      EventPattern: !Sub |-
       { "source": [ "aws.s3" ], 
         "detail": { 
           "eventName": ["PutObject"], 
           "requestParameters": {
             "bucketName": [ "${UploadBucket}" ] 
           } 
         }
       }
      Targets: 
      - Arn: !Ref StateMachine
        Id: StateMachine
        RoleArn: !GetAtt onS3UploadCallStepFunctionRole.Arn


  # This Lambda is called by step functions to do image recognition.  It looks for humans in the picture.
  RekFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RecognitionFunction
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          def handler(event, context):
              print('Initiating image rekognition')
              #bucket = event['ourBucket']
              #key = event['ourKey']
              # Structure of event from CloudWatch Events:
              bucket = event['detail']['requestParameters']['bucketName']
              key = event['detail']['requestParameters']['key']
              client = boto3.client('rekognition')
              response = client.detect_labels(Image={'S3Object': {'Bucket':bucket, 'Name':key}},
                  MaxLabels=10,
                  MinConfidence=75)
              print('Detected the following labels for ' + key)
              for label in response['Labels']:
                  print(label['Name'] + ' : ' + str(label['Confidence']))
                  if label['Name'] == "Human" or label['Name'] == "Person":
                      found = 'human'
                      break
                  else:
                      found = 'other'
              discovery = {
                  "found": found,
                  }
              return discovery

      Handler: index.handler
      Role: !GetAtt rekRole.Arn
      Runtime: python3.7

  # This Lambda is called by step functions when a human is found.  
  # It sends an SNS notification - you can't do this directly from Step Functions.
  # TODO: REPLACE THIS WITH DIRECT CALL FROM STEP FUNCTIONS, SEE https://docs.aws.amazon.com/step-functions/latest/dg/connect-sns.html
  NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-NotificationFunction
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          import os
          def handler(event, context):
              phoneNumber = os.environ['PHONE_NUMBER']
              smsMessage = "We found a human!"
              print('Initiating image rekognition')
              found = event['found']
              if found == 'human':
                  sns_client = boto3.client('sns')
                  sms = sns_client.publish(
                      PhoneNumber = phoneNumber, 
                      Message= smsMessage,
                  )
              else:
                  raise Exception('No human detected')
              return

      Handler: index.handler
      Role: !GetAtt rekRole.Arn
      Runtime: python3.7
      Environment:
        Variables:
          PHONE_NUMBER: !Ref NotificationPhoneNumber

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "StartAt": "Process Image", 
          "TimeoutSeconds":300,
          "States": {
            "Process Image": {
              "Type":"Task",
              "Resource":  "${RekFunction.Arn}",
              "Next": "Human Found?"
            },
            "Human Found?":{
              "Type":"Choice",
              "Choices":[
                {"Variable": "$.found", "StringEquals":"human", "Next":"Process Human"},
                {"Variable":"$.found", "StringEquals":"other",   "Next":"Other Processing"}
              ]
            },
            "Process Human":{
              "Type":"Task",
              "Resource": "${NotificationFunction.Arn}",
              "Next":"We succeeded! Yay!"
            },
            "Other Processing": {
              "Type":"Pass",
              "Next":"We succeeded! Yay!"
            },
            "We succeeded! Yay!": {
              "Type":"Succeed"
            }
          }
        }
      RoleArn: !GetAtt StateMachineRole.Arn


  # This custom resource cleans out buckets before delete:
  CleanupCustomResource:
    Type: Custom::helper
    Properties:
      ServiceToken: !GetAtt CleanupLambda.Arn
      uploadBucket: !Ref UploadBucket
      cloudTrailBucket:  !Ref CloudTrailBucket

  # This function will cleanup our buckets to allow delete
  CleanupLambda:
    Type: AWS::Lambda::Function
    DependsOn: [CleanupCustomResourcePolicy, CloudwatchLogsGroupCleanup]
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-CleanupFunction
      Role: !GetAtt CleanupCustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 5
      Runtime: python3.7
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          # import json
          # import os
          import cfnresponse
          import boto3
 
          print('Loading function')

          # Entry point:
          def lambda_handler(event, context):

              # Get the CloudFormation request type and other input:
              requestType = event['RequestType']
              rp          = event['ResourceProperties']
              uploadBucket   = rp['uploadBucket']
              cloudTrailBucket   = rp['cloudTrailBucket']

              if requestType == 'Delete':
                print ('Clean out buckets to enable delete... ' )
                boto3.resource('s3').Bucket(uploadBucket).objects.all().delete()
                boto3.resource('s3').Bucket(cloudTrailBucket).objects.all().delete()

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              
  # This Role gives permission to our custom resource Lambda.
  CleanupCustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CleanupCustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" 


  # This Policy is attached to the CustomResourceRole.
  # Basic permissions for CloudWatch Logs, plus S3.
  CleanupCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CleanupCustomResourcePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - s3:Delete*
            - s3:List*
            - s3:Get*
          Resource: "*"
      Roles: 
        -  !Ref CleanupCustomResourceRole   

  # CloudWatch Logs Groups are created automatically when Lambdas execute, but they are retained forever by default.
  # To control this, make them part of the stack:
  CloudwatchLogsGroupNotification:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NotificationFunction}
      RetentionInDays: 3

  CloudwatchLogsGroupCleanup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-CleanupFunction
      RetentionInDays: 3

  CloudwatchLogsGroupRek:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RekFunction}
      RetentionInDays: 3

Outputs:

  TheUploadBucket:
    Description:  URL of the S3 Bucket you can upload images to.  If images contain a human you should be notified.
    Value: !Ref UploadBucket  