AWSTemplateFormatVersion: 2010-09-09

# Stand up an ECS cluster.      

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcId
          - SubnetIds
      - Label: 
          default: "ECS Cluster"
        Parameters: 
          - InstanceType
          - MaxSize
          - DesiredCapacity

Parameters:
  
  MaxSize:
    Type: String
    Default: 4
    Description: Maximum number of ECS instances.

  DesiredCapacity:
    Type: String
    Default: 1
    Description: Desired number of ECS instances.

  InstanceType:
    Type: String
    AllowedValues: 
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge 
    Default: t2.micro
    Description: What kind of instance types in the cluster?

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 subnets in your selected VPC, private preferred if NATting is setup.  ECS cluster nodes will run here.

  ECSAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux 2 AMI for ECS using the Parameter Store...



Resources:

  # The IAM Role to be used by the EC2 instances in the ECS cluster.
  # Allows your Amazon ECS container agent to register / deregister with load balancer. 
  ECSContainerAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSContainerAgentRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs.amazonaws.com
      Policies:
      - PolicyName:  !Sub ${AWS::StackName}-ECSContainerAgentPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - elasticloadbalancing:Register*
              - elasticloadbalancing:Deregister*
              - elasticloadbalancing:Describe*
              - ec2:Describe*
              - ec2:AuthorizeSecurityGroupIngress
            Resource: '*'

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ClusterAutoscalingRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-ClusterAutoscalingPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: '*'

  # Permissions associated with each ECS Instance.
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSInstanceRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role  # Includes CloudWatch Logs
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM  # Permissions for SSM Agent (session manager and such)

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref ECSInstanceRole]

  # Security Group for the ECS instances.  
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EcsSecurityGroup
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  # Allow free intercommunication between instances and incoming traffic on 80:
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0     # This is pretty wide open.  In a other demos I restrict source traffic to the load balancer.
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup   # Self-reference - The cluster instances can freely intercommunicate with each other.

  # Now, an ECS Cluster to deploy to:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ECSCluster    # Something you can recognize in the console, but unique.

  # Auto-Scaling Group for the cluser:
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: ECS Cluster Node
        PropagateAtLaunch: true
      - Key: MemberOfCluster
        Value: !Ref ECSCluster
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M     
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  # The LaunchConfiguration for the cluster:      
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      SecurityGroups: [!Ref EcsSecurityGroup]
      InstanceType: !Ref InstanceType 
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-bootstrap amazon-cloudwatch-agent

          # Apparently, SSM agent is either not installed or not started when using the ECS AMIs:          
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          start amazon-ssm-agent

          # Critical: this ecs.config file must know the name of the cluster to connect to.
          # This is the only actual setup required (besides the pre-installed software)
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          
          # Believe it or not, you must configure the CloudWatch agent yourself.
          cd ~
          cat <<EOF > amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/dmesg",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "/var/log/dmesg",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "/var/log/messages",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/docker",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "/var/log/docker",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/ecs/ecs-agent.log.*",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "/var/log/ecs/ecs-agent.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/ecs/audit.log.*",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "/var/log/ecs/audit.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/ecs/ecs-init.log",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "/var/log/ecs/ecs-init.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              },
              "log_stream_name": "default-stream",
              "force_flush_interval" : 15
            }                  
          }
          EOF
          chmod o=r amazon-cloudwatch-agent.json
          sudo mv amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

          # Signal CloudFormation we are complete:
          /opt/aws/bin/cfn-signal --resource ECSAutoScalingGroup --stack ${AWS::StackName} --region ${AWS::Region}


  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain  # Keep the logs around if the stack fails 
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-ECSLogGroup
      RetentionInDays: 3


Outputs:
  ecscluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}:ECSCluster

  CloudWatchLogsConsole:
    Description:  Link to the CloudWatch Logs console for your log group
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${CloudwatchLogsGroup}


