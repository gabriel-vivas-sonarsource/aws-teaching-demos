AWSTemplateFormatVersion: 2010-09-09

# Automatically creates Technical Essentials Lab 2.
# You must have lab 1 created first, and provide its stack name here.

Parameters:

  Lab1Stack:
    Type:  String
    Description:  The name of the stack from Lab 1.  Must be exact.  Will be used for input values like VPC, Secrutiy Groups, etc.
    Default: lab1

  AmazonLinux1AMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux AMI using the Parameter Store...


Resources:

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData: 
        ImageId: !Ref AmazonLinux1AMI     # We lookup AMI from parameter store
        InstanceType: t3.micro              # hard-coded
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false     # No public IP needed - all access via load balancer
          Groups: 
          - Fn::ImportValue: !Sub ${Lab1Stack}:WebSecurityGroup
        UserData:  #  This code Installs the apache server and web app.  Lab is different, uses custom AMI.
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            # Uses Amazon Linux 1 due to PHP incompatibilities
            yum -y update
            yum -y install httpd php mysql php-mysql
            chkconfig httpd on
            /etc/init.d/httpd start
            cd /var/www/html
            wget https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-TECESS/v4.7.13/lab-3-manage-your-infrastructure/scripts/lab-app.zip
            unzip lab-app.zip -d /var/www/html/
            chown apache:root /var/www/html/rds.conf.php

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Lab1Stack}:PrivateSubnet1
        - Fn::ImportValue: !Sub ${Lab1Stack}:PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber        
      MinSize: 1       
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:  [ !Ref ALBTargetGroup ]
      Tags:
      - Key: Name
        Value: Lab Instance
        PropagateAtLaunch: true

  StepScalingOut: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      PolicyType: StepScaling
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      AdjustmentType: ChangeInCapacity    #  Or ExactCapacity, PercentChangeInCapacity
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 120        #  Estimated time for new instance to contribute to metrics.  Used in step scaling policies.
      StepAdjustments: 
        - MetricIntervalLowerBound: 0     #  Any size breach, increase by 1 (alarm triggers all scaling)
          ScalingAdjustment: 1

  StepScalingIn: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      PolicyType: StepScaling
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      AdjustmentType: ChangeInCapacity    #  Or ExactCapacity, PercentChangeInCapacity
      MetricAggregationType: Average
      StepAdjustments: 
        - MetricIntervalLowerBound: 0     #  If breach is any size, decrease by 1.
          ScalingAdjustment: -1

  # Fire alarm when average CPU > 60 for one 5 minute period.  Fire scale out policy.
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Fire alarm when ASG's average CPU > 60 for one 5 minute period.  Fire scale out policy.
      AlarmActions: 
        - !Ref StepScalingOut
      Statistic: Average
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AppAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      Threshold: 60
      EvaluationPeriods: 1
      Period: 300

  # Fire alarm when average CPU < 20 for one 5 minute periods.  Fire scale in policy.
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Fire alarm when ASG's average CPU < 20 for one 5 minute period.  Fire scale in policy.
      AlarmActions: 
        - !Ref StepScalingIn
      Statistic: Average
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AppAutoScalingGroup
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 300

  # An Application Load Balancer, with all of its sub-components:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      Subnets: 
        - Fn::ImportValue: !Sub ${Lab1Stack}:PublicSubnet1
        - Fn::ImportValue: !Sub ${Lab1Stack}:PublicSubnet2
      SecurityGroups: 
        - Fn::ImportValue: !Sub ${Lab1Stack}:WebSecurityGroup  # Plug in the security group.

  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # TargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: App
      VpcId: 
        Fn::ImportValue: !Sub ${Lab1Stack}:VPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 12
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !Sub http://${ALB.DNSName}
