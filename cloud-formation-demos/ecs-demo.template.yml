AWSTemplateFormatVersion: 2010-09-09

# Stand up an ECS and run a container on it.  Front it with an ALB.
# AutoScaling, CloudWatch Logs, and CloudWatch Container insights are setup too.
# You can run the demo container on Fargate or EC2, different resources created in each case.
# You will need an existing VPC with at least 2 subnets in two different AZs.  
# If you use private subnets be sure NATting is enabled.
# You won't be able to 'update' the stack to switch to/from Fargate/EC2 due to the LoadBalancer TargetGroup

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: DockerImage
        Parameters: 
        - DockerImage
        - ContainerPort
      - Label: 
          default: Network Configuration
        Parameters: 
        - VpcId
        - PublicSubnetIds
        - PrivateSubnetIds
      - Label: 
          default: ECS Cluster
        Parameters: 
        - DeployType
        - MaxSize
        - DesiredCapacity
        - ContainerInsights
        - ECSAMI

Parameters:
  
  DockerImage:
    Type: String
    Default: kennyk65/spring-cloud-aws-environment-demo
    Description: Image to use for a container.  Can be from DockerHub (try "nginx:latest") or ECR public ( try "public.ecr.aws/kkrueger/spring-cloud-aws-environment-demo") or ECR private ( such as "011673140073.dkr.ecr.us-west-2.amazonaws.com/spring-cloud-aws-environment-demo:latest" in my account) or include registry URL for a different source (repository-url/image:tag). 

  ContainerPort:
    Type: String
    Default: 80
    Description: The port that the Docker container will listen on.  For example nginx would listen on port 80, mysql would expect 3306, etc.
    
  DeployType:
    Description:  Do you want to deploy your container/task on EC2 or Fargate?  Fargate is easier, but more expensive - takes a lot more CPU and memory.
    Type: String
    Default: Fargate
    AllowedValues:
      - ECS
      - Fargate

  MaxSize:
    Type: String
    Default: 4
    Description: Maximum number of EC2 instances composing your cluster.  This is not the same as the number of tasks running on your cluster.

  DesiredCapacity:
    Type: String
    Default: 1
    Description: Desired number of EC2 instances composing your cluster.

  ContainerInsights:
    Type: String 
    Default: enabled
    AllowedValues:
    - enabled
    - disabled
    Description:  Do you want to turn on Container Insights?  It is fun to play with, but can add extra charges on your account.  

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two public subnets in your selected VPC.  These will be associated with your load balancer.

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 subnets in your selected VPC, private preferred if NATting is setup.  ECS cluster nodes will run here.

  ECSAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
    Description: You probably won't need to change this value.  This is looking up the latest ECS AMI using the Parameter Store...

Conditions:
  UseContainerInsights: !Equals [ !Ref ContainerInsights, enabled ]
  DeployToFargate:     !Equals [ !Ref DeployType, Fargate ]
  DeployToEc2:  !Not [ !Equals [ !Ref DeployType, Fargate ] ]

Resources:

  # The IAM Role to be used by the ECS Service.  Not the tasks, not the EC2 instances, etc..
  # Essential permissions to allow registration / deregistration with load balancer.
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs.amazonaws.com
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
            - elasticloadbalancing:Register*
            - elasticloadbalancing:Deregister*
            - elasticloadbalancing:Describe*
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Resource: '*'

  # When running in Fargate, the task definition MUST have a role
  # providing "to support log driver awslogs", whatever that is.
  # It also needs permission to pull images from ECR:
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-EcsTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-EcsTaskPolicy
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            Effect: Allow
            Action: 
            - logs:*    #  Not sure which permissions are needed for some kind of logging activity.
            - ecr:*     #  Not sure which permissions are needed to pull an ECR image.
            Resource: 
            - "*"

  # Allow application autoscaling to change the # of ECS tasks:
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Resource: '*'

  # Permissions associated with each ECS Instance.
  EC2Role:
    Type: AWS::IAM::Role
    Condition: DeployToEc2
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM  # Permissions for SSM Agent (session manager and such)

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: DeployToEc2
    Properties:
      Path: /
      Roles: [!Ref EC2Role]

  # Security Group for the load balancer.  Allow HTTP from anywhere:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for load balancer server
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: ALBSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  # Security Group for the ECS instances.  Allow inbound ports for the ELB to use:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  # Allow free intercommunication between cluster instances.  Allow any incoming traffic but only from the load balancer:
  EcsSecurityGroupALBinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 80        # Fargate may use 80 as a host port since it doesn't worry about port conflicts.  EC2 would use 31000 - 61000 because it does.
      ToPort: 61000
      SourceSecurityGroupId: !Ref ALBSecurityGroup   # Only any traffic as long as it is coming from the load balancer.
  EcsSecurityGroupIntercommunication:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup   # Self-reference - The cluster instances can freely intercommunicate with each other.

  # Now, an ECS Cluster to deploy to.  The cluster nodes are defined below in the AutoScaling group:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName    # Something you can recognize in the console, but unique.
      ClusterSettings: 
      - Name: containerInsights
        Value: !If [UseContainerInsights, enabled, disabled]

  # Auto-Scaling Group controls the number of EC2 instances backing the cluser:
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: DeployToEc2
    Properties:
      AutoScalingGroupName: !Ref AWS::StackName
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber        
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: ECS Cluster Node
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M     # 5 minutes
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  # The LaunchTemplate for the cluster:      
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: DeployToEc2
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData: 
        ImageId: !Ref ECSAMI
        InstanceType: t3.small 
        IamInstanceProfile: 
          Name: !Ref EC2InstanceProfile
        NetworkInterfaces:
        - DeviceIndex: 0
          Groups: [ !Ref EcsSecurityGroup ]   # Plug in the security group.
        UserData:      
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap amazon-cloudwatch-agent

            # Apparently, SSM agent is either not installed or not started when using the ECS AMIs:          
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            start amazon-ssm-agent

            # Critical: this ecs.config file must know the name of the cluster to connect to.
            # This is the only actual setup required (besides the pre-installed software)
            echo "ECS_CLUSTER=${ECSCluster}" >> /etc/ecs/ecs.config        
            
            # Believe it or not, you must configure the CloudWatch agent yourself.
            cd ~
            cat <<EOF > amazon-cloudwatch-agent.json
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/dmesg",
                        "log_group_name": "${CloudwatchLogsGroup}",
                        "log_stream_name": "/var/log/dmesg",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "${CloudwatchLogsGroup}",
                        "log_stream_name": "/var/log/messages",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/docker",
                        "log_group_name": "${CloudwatchLogsGroup}",
                        "log_stream_name": "/var/log/docker",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/ecs/ecs-agent.log.*",
                        "log_group_name": "${CloudwatchLogsGroup}",
                        "log_stream_name": "/var/log/ecs/ecs-agent.log",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/ecs/audit.log.*",
                        "log_group_name": "${CloudwatchLogsGroup}",
                        "log_stream_name": "/var/log/ecs/audit.log",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/ecs/ecs-init.log",
                        "log_group_name": "${CloudwatchLogsGroup}",
                        "log_stream_name": "/var/log/ecs/ecs-init.log",
                        "timezone": "UTC"
                      }
                    ]
                  }
                },
                "log_stream_name": "default-stream",
                "force_flush_interval" : 15
              }                  
            }
            EOF
            chmod o=r amazon-cloudwatch-agent.json
            sudo mv amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

            /opt/aws/bin/cfn-signal --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup 


  # An ECS "Service" associates a TaskDefinition with a cluster; it ties tasks to load balancers. 
  # The settings are significantly different for Fargate vs normal EC2-backed Cluster, hence two separate definitions.
  # EC2 requires role setting, but Fargate must not have this.  Fargate requires network configuration, generally not needed for EC2.
  ECSServiceEc2:
    Type: AWS::ECS::Service
    Condition: DeployToEc2
    DependsOn: [ALBListener, ECSAutoScalingGroup]   # Problematic to create service before cluster nodes or load balancer in place.
    Properties:
      ServiceName: !Sub ${AWS::StackName}-DemoService
      Cluster: !Ref ECSCluster
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref TaskDefinitionEc2
      DesiredCount: 1
      LoadBalancers:        
      - ContainerName: TheContainer  # The name of the container cannot be a reasonable value like the image name.
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref ALBTargetGroup

  ECSServiceFargate:
    Type: AWS::ECS::Service
    Condition: DeployToFargate
    DependsOn: ALBListener  # Problematic to create service before cluster nodes or load balancer in place.
    Properties:
      ServiceName: !Sub ${AWS::StackName}-DemoService
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinitionFargate
      DesiredCount: 1
      LoadBalancers:        
      - ContainerName: TheContainer  # The name of the container cannot be a reasonable value like the image name.
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref ALBTargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
          - !Ref EcsSecurityGroup
          Subnets: !Ref PrivateSubnetIds        

  # This TaskDefinition defines the image(s) we want to run on ECS
  TaskDefinitionEc2:
    Type: AWS::ECS::TaskDefinition
    Condition: DeployToEc2
    Properties:
      Family: !Sub ${AWS::StackName}-DemoTask  # Basically, this is the name of the Task Definition
      ContainerDefinitions:
      - Name: TheContainer    # The name of the container cannot be a reasonable value like the image name.
        Image: !Ref DockerImage
        Cpu: 256        # 256 CPU units is 1/4 of a vCPU                   
        Memory: 512                            
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: task
            mode: non-blocking    # We encounter large number of small files otherwise.
            max-buffer-size: 1m
        PortMappings:
        - ContainerPort: !Ref ContainerPort
          # Notice how the HostPort is not defined.  This means it will be assigned randomly.  The ALB will find it automatically.  Cool huh?
        
  # This TaskDefinition defines the image(s) we want to run on ECS
  TaskDefinitionFargate:
    Type: AWS::ECS::TaskDefinition
    Condition: DeployToFargate
    Properties:
      Family: !Sub ${AWS::StackName}-DemoTask
      Cpu: 1024                                # Task-level setting required in Fargate, plus it seems to require more CPU. 
      Memory: 2GB                                # Task-level setting required in Fargate, plus it seems to require more memory.
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn    # Required in Fargate, optional otherwise
      NetworkMode: !If [DeployToFargate, awsvpc, bridge] # Required for Fargate, ironic because this is the only option in Fargate.
      RequiresCompatibilities:  
      - !If [DeployToFargate, FARGATE, EC2]  # Must be Fargate on Fargate
      ContainerDefinitions:
      - Name: TheContainer    # The name of the container cannot be a reasonable value like the image name.
        Image: !Ref DockerImage
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: task
            mode: non-blocking    # We encounter large number of small files otherwise.
            max-buffer-size: 1m
        PortMappings:
        - ContainerPort: !Ref ContainerPort
          # Notice how the HostPort is not defined.  This means it will be assigned randomly.  The ALB will find it automatically.  Cool huh?


  # Now the Load Balancer, with all of its sub-components:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [!Ref ALBSecurityGroup]
  # Listener.  Whenever traffic comes in on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # This is the listener's default and only TargetGroup. It is hooked up to the ECS "Service" above.
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TargetGroup
      VpcId: !Ref VpcId
      TargetType: !If [DeployToFargate, ip, instance]  # Fargate deploy must be IP for awsvpc mode, otherwise instance.
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /       
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3


  # Apply ApplicationAutoScaling to the ECS Service.
  # For demo simplicity, we will target the number of requests per minute per target of the load balancer.
  # Simply refresh your browser again and again to watch the service scale.
  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      RoleARN: !GetAtt AutoscalingRole.Arn
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: # Careful with the formatting here...
        !If
        - DeployToFargate
        - !Sub service/${ECSCluster}/${ECSServiceFargate.Name}
        - !Sub service/${ECSCluster}/${ECSServiceEc2.Name} 
  
  # Target tracking (like a thermostat) is looking at number of requests going through the load balancer.
  ServiceScalingPolicyALB:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ECSCluster}-AlbRequestsPerTargetPerMinute
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 10    # Keep in mind the ELB's health checks will account for several requests per minute
        ScaleInCooldown: 60
        ScaleOutCooldown: 10
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Sub ${ALB.LoadBalancerFullName}/${ALBTargetGroup.TargetGroupFullName}

  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ECSLogGroup-${AWS::StackName}
      RetentionInDays: 3

Outputs:
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Sub http://${ALB.DNSName}

  ECSClusterConsole:
    Description:  Link to the ECS Console page
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/${ECSCluster}/services
  
  CloudWatchContainerInsights:
    Condition: UseContainerInsights
    Description:  Console link to CloudWatch Container Insights for monitoring
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#container-insights:performance/ECS:Cluster?~(query~(controls~(CW*3a*3aECS.cluster~(~'${ECSCluster})))~context~())

  CloudWatchLogs:
    Description:  Console link to CloudWatch Logs
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${CloudwatchLogsGroup}
