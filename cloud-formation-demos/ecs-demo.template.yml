AWSTemplateFormatVersion: 2010-09-09

# Stand up an ECS and run a container on it.  Front it with an ALB.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcId
          - PublicSubnetIds
          - PrivateSubnetIds
      - Label: 
          default: "ECS Cluster"
        Parameters: 
          - MaxSize
          - DesiredCapacity

Parameters:
  
  DockerImage:
    Type: String
    Default: kennyk65/spring-cloud-aws-environment-demo
    Description: Image to use for a container.  Can be from DockerHub or include registry URL for a different source (repository-url/image:tag). 

  MaxSize:
    Type: String
    Default: 1
    Description: Maximum number of ECS instances.

  DesiredCapacity:
    Type: String
    Default: 1
    Description: Desired number of ECS instances.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two public subnets in your selected VPC.  These will be associated with your load balancer.

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 subnets in your selected VPC, private preferred if NATting is setup.  ECS cluster nodes will run here.

Mappings:
  #  These are variants of the Amazon Linux AMI optimized for ECS:
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-d61027ad
    us-east-2:
      AMI: ami-bb8eaede
    us-west-1:
      AMI: ami-514e6431
    us-west-2:
      AMI: ami-c6f81abe
    eu-west-1:
      AMI: ami-bd7e8dc4
    eu-central-1:
      AMI: ami-f15ff69e
    ap-northeast-1:
      AMI: ami-ab5ea9cd
    ap-southeast-1:
      AMI: ami-ae0b91cd
    ap-southeast-2:
      AMI: ami-5781be34


Resources:

  # The IAM Role to be used by the EC2 instances in the ECS cluster.
  # Essential permissions to allow registration / deregistration with load balancer.
  # Allows your Amazon ECS container agent to make calls to your load balancer: 
  ECSContainerAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs.amazonaws.com
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - elasticloadbalancing:Register*
              - elasticloadbalancing:Deregister*
              - elasticloadbalancing:Describe*
              - ec2:Describe*
              - ec2:AuthorizeSecurityGroupIngress
            Resource: '*'

  # Now, an ECS Cluster to deploy to:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', ["DemoCluster-", !Ref 'AWS::StackName']]    # Something you can recognize in the console, but unique.

  # An ECS "Service" associates a TaskDefinition with a cluster; it ties tasks to load balancers.
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ECSContainerAgentRole
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LoadBalancers:              # The "environment-demo" will be associated with the ALBTargetGroup.  Not sure how to make that port variable.
      - ContainerName: environment-demo
        ContainerPort: 8080
        TargetGroupArn: !Ref ALBTargetGroup

  # This TaskDefinition defines the image(s) we want to run on ECS
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app]]
      ContainerDefinitions:

        # We want to run a little Spring Boot app named "environment-demo",
        # but since the DockerImage is an input parameter it could be anything.  
      - Name: environment-demo
        Image: !Ref DockerImage
        Cpu: 10
        Memory: 256
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-demo-app
        PortMappings:
        - ContainerPort: 8080     # The embedded Tomcat inside this container likes to listen on 8080.
          # Notice how the HostPort is not defined.  This means it will be assigned randomly.  The ALB will find it automatically.  Cool huh?


  # Security Group for the ECS instances.  Allow inbound ports for the ELB to use:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'

  #  Inbound rules for HTTP on 80 plus anything above 31000:
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'EcsSecurityGroup'

  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14



  # Now the Load Balancer, with all of its sub-components:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [!Ref EcsSecurityGroup]
  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    # DependsOn: ECSServiceRole
    Properties:
      Port: '80'
      Protocol: HTTP
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # The rule is simple; all traffic to "/" goes to our one and only target group:      
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      Priority: 1
  # This TargetGroup is hooked up to the ECS "Service" above.
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    # DependsOn: ECSALB
    Properties:
      Name: ALBTargetGroup
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health        # Spring Boot enables this endpoint.
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2


  # Auto-Scaling Group for the cluser:
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: ECS Cluster Node
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M     # 5 minutes
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  # The LaunchConfiguration for the cluster:      
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AmazonLinuxAMI, !Ref 'AWS::Region', AMI]
      SecurityGroups: [!Ref EcsSecurityGroup]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      # KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}


  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: '*'

  # This is scaling the actual containers.  The ECSService (above) ties the 
  # TaskDefinition to the cluster, and this teaches it how to scale:
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    # DependsOn: ECSService
    Properties:
      MinCapacity: 1
      MaxCapacity: 2
      ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [ECSService, Name]]]  
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ServiceScalingPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Permissions associated with each ECS Instance.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'


Outputs:
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Join ['', ["http://", !GetAtt [ALB, DNSName]]]
  ecsservice:
    Value: !Ref ECSService
  ecscluster:
    Value: !Ref ECSCluster
  taskdef:
    Value: !Ref TaskDefinition







