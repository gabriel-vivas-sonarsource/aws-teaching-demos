---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to install CloudWatchAgent on amazon linux. It was validated on amazon linux 2'

Parameters:

  LogGroupName:
    Description: The name of the CloudWatch log group that you want the CloudWatch agent to log to.
    Type: String
    Default: cloudwatch-agent-demo

  WindowsAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base
    #Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base    
    Description: You probably won't need to change this value.  This is looking up the latest Windows AMI using the Parameter Store...

Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref WindowsAMI     # Obtain the AMI from the SSM Parameter
      InstanceType: t3.micro
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          <script>
          mkdir C:\Downloads\Amazon\AmazonCloudWatchAgent
          powershell -Command "(New-Object Net.WebClient).DownloadFile('https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi','C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi')"
          C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi
          cfn-init.exe -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
          </script>
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_setupCfnHup
            - 01_CfnHup_service
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, 
        # cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        00_setupCfnHup:
          files:
             "c:\\cfn\\cfn-hup.conf":
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
             "c:\\cfn\\hooks.d\\amazon-cloudwatch-agent-auto-reloader.conf":
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=cfn-init.exe -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
        01_CfnHup_service:
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "c:\\cfn\\cfn-hup.conf"
                  - "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json":
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "C:\\cfn\\log\\cfn-hup.log",
                            "log_group_name": "${LogGroupName}",
                            "log_stream_name": "{instance_id}-cfn-hup"
                          },
                          {
                            "file_path": "C:\\cfn\\log\\cfn-init.log",
                            "log_group_name": "${LogGroupName}",
                            "log_stream_name": "{instance_id}-cfn-init"
                          },
                          {
                            "file_path": "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Log\\UserdataExecution.log",
                            "log_group_name": "${LogGroupName}",
                            "log_stream_name": "{instance_id}-ec2launchlog"
                          },
                          {
                            "file_path": "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs\\Ec2ConfigLog.txt",
                            "log_group_name": "${LogGroupName}",
                            "log_stream_name": "{instance_id}-ec2configlog"
                          }
                        ]
                      }
                    }
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "Memory": {
                        "measurement": [
                          "% Committed Bytes In Use"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "Paging File": {
                        "measurement": [
                          "% Usage"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "*"
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
            02_start_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"

  
  # Anything will do.  Can't have an EC2 instance without a SG
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: anything will do
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0


  # Attach Role to EC2 Instance.
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2InstanceRole]

  # Allow EC2 instance to make calls to SSM, Cloudwatch.
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      # Note that any other policies required for the instance to do its job would be defined here as well.  

  # Explicit declaration of the LogGroup allows us to control its retention:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: 3


# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  WebServerIpAddress:
    Description: IP Address of the web server
    Value: !Sub http://${EC2Instance.PublicIp}

  CloudWatchLogsConsole:
    Description:  Link to the CloudWatch Logs console for your log group
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${LogGroupName}

  SessionManagerLink:
    Description: Access instance via web browser
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${EC2Instance}?region=${AWS::Region}#  


